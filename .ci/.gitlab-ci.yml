stages:
  - lint
  - test

variables:
  NEED_VOTES: 1

.before_script_template:
  before_script:
    - apt-get --quiet update --yes
    - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1

    # Setup path as android_home for moving/exporting the downloaded sdk into it
    - export ANDROID_HOME="${PWD}/android-home"
    # Create a new directory at specified location
    - install -d $ANDROID_HOME
    # Here we are installing androidSDK tools from official source,
    # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
    # after that unzipping those tools and
    # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
    - wget --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
    # move to the archive at ANDROID_HOME
    - pushd $ANDROID_HOME
    - unzip -d cmdline-tools cmdline-tools.zip
    - rm -rf cmdline-tools.zip
    - popd
    - export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/cmdline-tools/bin/

    # Checking sdkManager version
    - sdkmanager --version

    # use yes to accept all licenses
    - yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses || true
    - sdkmanager --sdk_root=${ANDROID_HOME} "platforms;android-${ANDROID_COMPILE_SDK}"
    - sdkmanager --sdk_root=${ANDROID_HOME} "platform-tools"
    - sdkmanager --sdk_root=${ANDROID_HOME} "build-tools;${ANDROID_BUILD_TOOLS}"

    # Not necessary, but just for surity
    - chmod +x ./gradlew

cache:
  key: ${CI_PROJECT_ID}
  paths:
    - .gradle/

ci-mr:
  stage: test
  image: laptevss/gitlab-api-util
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  tags:
    - docker_miem
  script:
    - echo ${CI_API_V4_URL}
    - echo "CI_PROJECT_ID ${CI_PROJECT_ID}"
    - echo "CI_COMMIT_SHA ${CI_COMMIT_SHA}"
    - "export MR_ID=$(curl --silent --request GET --header \"PRIVATE-TOKEN: $GITLAB_TOKEN_FOR_CI\" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests | jq \".[] | if .sha == \\\"${CI_COMMIT_SHA}\\\" then .id else {} end\" | grep --invert-match {})"
    - "export MR_TITLE=$(curl --silent --request GET --header \"PRIVATE-TOKEN: $GITLAB_TOKEN_FOR_CI\" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests | jq \".[] | if .sha == \\\"${CI_COMMIT_SHA}\\\" then .title else {} end\" | grep --invert-match {})"
    - "export MR_WIP=$(curl --silent --request GET --header \"PRIVATE-TOKEN: $GITLAB_TOKEN_FOR_CI\" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests | jq \".[] | if .sha == \\\"${CI_COMMIT_SHA}\\\" then .work_in_progress else {} end\" | grep --invert-match {})"
    - "export MR_UPVOTES=$(curl --silent --request GET --header \"PRIVATE-TOKEN: $GITLAB_TOKEN_FOR_CI\" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests | jq \".[] | if .sha == \\\"${CI_COMMIT_SHA}\\\" then .upvotes else {} end\" | grep --invert-match {})"
    - "export MR_DOWNVOTES=$(curl --silent --request GET --header \"PRIVATE-TOKEN: $GITLAB_TOKEN_FOR_CI\" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests | jq \".[] | if .sha == \\\"${CI_COMMIT_SHA}\\\" then .downvotes else {} end\" | grep --invert-match {})"
    - MR_VOTES=$(expr ${MR_UPVOTES} - ${MR_DOWNVOTES})
    - NEED_VOTES_REAL=${NEED_VOTES:-1}
    - echo "MR_ID ${MR_ID} MR_TITLE ${MR_TITLE} MR_WIP ${MR_WIP} MR_UPVOTES ${MR_UPVOTES} MR_DOWNVOTES ${MR_DOWNVOTES}"
    - echo "MR_VOTES ${MR_VOTES} Up vote = 1, down vote = -1, MR OK if votes >=${NEED_VOTES_REAL}"
    - if [ "${MR_VOTES}" -ge "$(expr ${NEED_VOTES_REAL})" ];
      then
      echo "MR OK";
      else
      echo "MR ERROR Need more votes";
      exit 1;
      fi

detekt:
  stage: lint
  image: openjdk:17-jdk
  rules:
    - when: always
  tags:
    - docker_miem
  script:
    - ./gradlew detektAll --parallel
